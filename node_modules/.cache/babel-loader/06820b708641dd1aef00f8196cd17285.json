{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _screenfull = require('screenfull');\n\nvar _screenfull2 = _interopRequireDefault(_screenfull);\n\nvar _reactJplayerUtils = require('react-jplayer-utils');\n\nvar _recompose = require('recompose');\n\nvar _actions = require('../../../actions/actions');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar mapStateToProps = function mapStateToProps(_ref, _ref2) {\n  var jPlayers = _ref.jPlayers;\n  var id = _ref2.id;\n  return {\n    fullScreen: jPlayers[id].fullScreen\n  };\n};\n\nvar handlers = {\n  closeFullScreenListener: function closeFullScreenListener(props) {\n    return function () {\n      if (!_screenfull2.default.isFullscreen && props.fullScreen) {\n        props.setOption(props.id, 'fullScreen', false);\n      }\n    };\n  }\n};\nvar lifecycleFunctions = {\n  requestFullScreen: function requestFullScreen() {\n    if (this.props.fullScreen) {\n      if (_screenfull2.default.enabled) {\n        _screenfull2.default.request(this.props.jPlayer);\n      } // Legacy browsers don't implement full screen api\n      // Safari 5.1 doesn't hide the other elements even with fullscreen api\n\n\n      document.body.style.visibility = 'hidden';\n    }\n  },\n  exitFullScreen: function exitFullScreen() {\n    if (!this.props.fullScreen) {\n      if (_screenfull2.default.enabled) {\n        _screenfull2.default.exit();\n      }\n\n      document.body.style.visibility = 'visible';\n    }\n  },\n  componentDidMount: function componentDidMount() {\n    if (_screenfull2.default.enabled) {\n      document.addEventListener(_screenfull2.default.raw.fullscreenchange, this.props.closeFullScreenListener);\n    }\n\n    this.requestFullScreen();\n  },\n  componentDidUpdate: function componentDidUpdate(prevProps) {\n    this.requestFullScreen();\n\n    if (prevProps.fullScreen !== this.props.fullScreen) {\n      this.exitFullScreen();\n    }\n  },\n  componentWillUnmount: function componentWillUnmount() {\n    if (_screenfull2.default.enabled) {\n      document.removeEventListener(_screenfull2.default.raw.fullscreenchange, this.props.closeFullScreenListener);\n    }\n  }\n};\nexports.default = (0, _recompose.compose)((0, _reactJplayerUtils.connectWithId)(mapStateToProps, {\n  setOption: _actions.setOption\n}), (0, _recompose.withHandlers)(handlers), (0, _recompose.lifecycle)(lifecycleFunctions))((0, _recompose.renderNothing)(null));","map":null,"metadata":{},"sourceType":"script"}