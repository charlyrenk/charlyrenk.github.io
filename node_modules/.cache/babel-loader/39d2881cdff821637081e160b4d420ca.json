{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _recompose = require('recompose');\n\nvar _reactJplayerUtils = require('react-jplayer-utils');\n\nvar _events = require('./events');\n\nvar _events2 = _interopRequireDefault(_events);\n\nvar _urlNotSupportedError = require('../../../util/errorHandlers/urlNotSupportedError');\n\nvar _urlNotSupportedError2 = _interopRequireDefault(_urlNotSupportedError);\n\nvar _actions = require('../../../actions/actions');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar mapStateToProps = function mapStateToProps(_ref, _ref2) {\n  var jPlayers = _ref.jPlayers;\n  var id = _ref2.id;\n  return {\n    src: jPlayers[id].src,\n    pauseOthersOnPlay: jPlayers[id].pauseOthersOnPlay,\n    otherJPlayerIds: Object.keys(jPlayers).filter(function (key) {\n      return key !== id;\n    })\n  };\n};\n\nvar contextTypes = {\n  internalEvents: _propTypes2.default.shape({\n    onAbort: _propTypes2.default.func,\n    onCanPlay: _propTypes2.default.func,\n    onCanPlayThrough: _propTypes2.default.func,\n    onDurationChange: _propTypes2.default.func,\n    onEmptied: _propTypes2.default.func,\n    onEncrypted: _propTypes2.default.func,\n    onEnded: _propTypes2.default.func,\n    onError: _propTypes2.default.func,\n    onLoadedData: _propTypes2.default.func,\n    onLoadedMetadata: _propTypes2.default.func,\n    onLoadStart: _propTypes2.default.func,\n    onPause: _propTypes2.default.func,\n    onPlay: _propTypes2.default.func,\n    onPlaying: _propTypes2.default.func,\n    onProgress: _propTypes2.default.func,\n    onRateChange: _propTypes2.default.func,\n    onSeeked: _propTypes2.default.func,\n    onSeeking: _propTypes2.default.func,\n    onStalled: _propTypes2.default.func,\n    onSuspend: _propTypes2.default.func,\n    onTimeUpdate: _propTypes2.default.func,\n    onVolumeChange: _propTypes2.default.func,\n    onWaiting: _propTypes2.default.func\n  })\n};\nvar defaultProps = {\n  internalEvents: {}\n};\n\nvar mapEvents = function mapEvents(ownerProps) {\n  var events = {};\n  Object.keys(ownerProps.internalEvents).forEach(function (key) {\n    events[key] = function (e) {\n      ownerProps.internalEvents[key](e);\n      ownerProps[key](e);\n    };\n  });\n  return _extends({}, ownerProps, events);\n};\n\nvar firstHandlers = {\n  pauseOthers: function pauseOthers(props) {\n    return function () {\n      props.otherJPlayerIds.forEach(function (id) {\n        return props.pause(id);\n      });\n    };\n  }\n};\nvar secondHandlers = {\n  onDurationChange: function onDurationChange(props) {\n    return function (e) {\n      props.updateMediaStatus();\n      props.onDurationChange(e);\n    };\n  },\n  onEnded: function onEnded(props) {\n    return function (e) {\n      props.pause(props.id, 0);\n      props.updateMediaStatus();\n      props.onEnded(e);\n    };\n  },\n  onError: function onError(props) {\n    return function (e) {\n      props.setOption(props.id, 'error', (0, _urlNotSupportedError2.default)(props.src));\n      props.onError(e);\n    };\n  },\n  onPlay: function onPlay(props) {\n    return function (e) {\n      if (props.pauseOthersOnPlay) {\n        props.pauseOthers();\n      }\n\n      props.play(props.id);\n      props.onPlay(e);\n    };\n  },\n  onProgress: function onProgress(props) {\n    return function (e) {\n      var bufferedTimeRanges = [];\n\n      for (var i = 0; i < e.currentTarget.buffered.length; i += 1) {\n        bufferedTimeRanges.push({\n          start: e.currentTarget.buffered.start(i),\n          end: e.currentTarget.buffered.end(i)\n        });\n      }\n\n      props.updateMediaStatus();\n      props.setOption(props.id, 'bufferedTimeRanges', bufferedTimeRanges);\n      props.onProgress(e);\n    };\n  },\n  onSeeked: function onSeeked(props) {\n    return function (e) {\n      props.setOption(props.id, 'seeking', false);\n      props.onSeeked(e);\n    };\n  },\n  onSeeking: function onSeeking(props) {\n    return function (e) {\n      props.setOption(props.id, 'seeking', true);\n      props.onSeeking(e);\n    };\n  },\n  onTimeUpdate: function onTimeUpdate(props) {\n    return function (e) {\n      props.updateMediaStatus();\n      props.onTimeUpdate(e);\n    };\n  }\n};\nexports.default = (0, _recompose.compose)((0, _reactJplayerUtils.connectWithId)(mapStateToProps, {\n  setOption: _actions.setOption,\n  pause: _actions.pause,\n  play: _actions.play\n}), (0, _recompose.getContext)(contextTypes), (0, _recompose.defaultProps)(defaultProps), (0, _recompose.mapProps)(mapEvents), (0, _recompose.withHandlers)(firstHandlers), (0, _recompose.withHandlers)(secondHandlers))(_events2.default);","map":null,"metadata":{},"sourceType":"script"}