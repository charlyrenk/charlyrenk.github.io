{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _reactJplayerUtils = require('react-jplayer-utils');\n\nvar _recompose = require('recompose');\n\nvar _media = require('./media');\n\nvar _media2 = _interopRequireDefault(_media);\n\nvar _actions = require('../../actions/actions');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar mapStateToProps = function mapStateToProps(_ref, _ref2) {\n  var jPlayers = _ref.jPlayers;\n  var id = _ref2.id;\n  return {\n    loop: jPlayers[id].loop,\n    src: jPlayers[id].src,\n    playHeadPercent: jPlayers[id].playHeadPercent,\n    paused: jPlayers[id].paused,\n    defaultPlaybackRate: jPlayers[id].defaultPlaybackRate,\n    playbackRate: jPlayers[id].playbackRate,\n    preload: jPlayers[id].preload,\n    volume: jPlayers[id].volume,\n    muted: jPlayers[id].muted,\n    autoplay: jPlayers[id].autoplay,\n    newTime: jPlayers[id].newTime,\n    tracks: jPlayers[id].media.tracks\n  };\n};\n\nvar handlers = function handlers() {\n  var currentMedia = void 0;\n\n  var getSeekableEnd = function getSeekableEnd() {\n    if (currentMedia.seekable.length > 0) {\n      return currentMedia.seekable.end(currentMedia.seekable.length - 1);\n    }\n\n    return NaN;\n  };\n\n  var getCurrentPercentRelative = function getCurrentPercentRelative() {\n    return (0, _reactJplayerUtils.toPercentage)(currentMedia.currentTime, getSeekableEnd());\n  };\n\n  var getSeekPercent = function getSeekPercent() {\n    return (0, _reactJplayerUtils.toPercentage)(getSeekableEnd(), currentMedia.duration);\n  };\n\n  return {\n    setCurrentMedia: function setCurrentMedia() {\n      return function (ref) {\n        currentMedia = ref;\n      };\n    },\n    updateMediaStatus: function updateMediaStatus(props) {\n      return function () {\n        var currentPercentAbsolute = (0, _reactJplayerUtils.toPercentage)(currentMedia.currentTime, currentMedia.duration); // Is infinite when live streaming\n\n        if (isFinite(currentMedia.duration)) {\n          props.setOption(props.id, 'duration', currentMedia.duration);\n        }\n\n        props.setOption(props.id, 'currentPercentRelative', getCurrentPercentRelative());\n        props.setOption(props.id, 'seekPercent', getSeekPercent());\n        props.setOption(props.id, 'currentPercentAbsolute', currentPercentAbsolute);\n        props.setOption(props.id, 'currentTime', currentMedia.currentTime);\n        props.setOption(props.id, 'playbackRate', currentMedia.playbackRate);\n      };\n    },\n    updateMediaSrc: function updateMediaSrc(props) {\n      return function () {\n        if (props.src !== null) {\n          currentMedia.src = props.src;\n        }\n      };\n    },\n    updateMediaTime: function updateMediaTime(props) {\n      return function () {\n        currentMedia.currentTime = props.newTime;\n        props.setOption(props.id, 'newTime', null);\n      };\n    },\n    updateMediaTimeAfterSeeking: function updateMediaTimeAfterSeeking(props) {\n      return function () {\n        var seekableEnd = getSeekableEnd(); // TODO: Investigate why some .mp3 urls don't fire media events enough (http://www.davidgagne.net/m/song.mp3).\n        // Hasn't fully loaded the song????\n\n        if (isFinite(seekableEnd)) {\n          currentMedia.currentTime = (0, _reactJplayerUtils.toRelativePercentage)(props.playHeadPercent, seekableEnd);\n          /* Media events don't fire fast enough to give a smooth animation\n            when dragging so we update it here as well, same problem as above? */\n\n          props.setOption(props.id, 'currentPercentRelative', getCurrentPercentRelative());\n        }\n      };\n    },\n    updateMediaPlayState: function updateMediaPlayState(props) {\n      return function () {\n        if (props.paused) {\n          currentMedia.pause();\n        } else {\n          currentMedia.play();\n        }\n      };\n    },\n    updateOtherMediaValues: function updateOtherMediaValues(props) {\n      return function () {\n        currentMedia.defaultPlaybackRate = props.defaultPlaybackRate;\n        currentMedia.playbackRate = props.playbackRate;\n        currentMedia.preload = props.preload;\n        currentMedia.volume = props.volume;\n        currentMedia.muted = props.muted;\n        currentMedia.autoplay = props.autoplay;\n        currentMedia.loop = props.loop;\n      };\n    }\n  };\n};\n\nvar lifecycle = {\n  componentDidMount: function componentDidMount() {\n    if (this.props.src !== null) {\n      this.props.updateMediaSrc();\n    }\n\n    this.props.updateOtherMediaValues();\n  },\n  componentDidUpdate: function componentDidUpdate(prevProps) {\n    if (prevProps.src !== this.props.src) {\n      this.props.updateMediaSrc();\n    }\n\n    if (this.props.newTime !== null) {\n      this.props.updateMediaTime();\n    }\n\n    if (prevProps.playHeadPercent !== this.props.playHeadPercent) {\n      this.props.updateMediaTimeAfterSeeking();\n    }\n\n    this.props.updateMediaPlayState();\n    this.props.updateOtherMediaValues();\n  }\n};\nexports.default = (0, _recompose.compose)((0, _reactJplayerUtils.connectWithId)(mapStateToProps, {\n  setOption: _actions.setOption\n}), (0, _recompose.withHandlers)(handlers), (0, _recompose.lifecycle)(lifecycle))(_media2.default);","map":null,"metadata":{},"sourceType":"script"}