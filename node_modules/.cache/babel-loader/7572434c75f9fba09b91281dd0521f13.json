{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _reactJplayerUtils = require('react-jplayer-utils');\n\nvar _recompose = require('recompose');\n\nvar _actions = require('../../../actions/actions');\n\nvar mapStateToProps = function mapStateToProps(_ref, _ref2) {\n  var jPlayers = _ref.jPlayers;\n  var id = _ref2.id;\n  return {\n    timeFormats: jPlayers[id].timeFormats,\n    currentTime: jPlayers[id].currentTime,\n    duration: jPlayers[id].duration,\n    showRemainingDuration: jPlayers[id].showRemainingDuration\n  };\n};\n\nvar handlers = {\n  setDurationText: function setDurationText(props) {\n    return function () {\n      var durationText = '';\n\n      if (props.showRemainingDuration) {\n        var timeRemaining = props.duration - props.currentTime;\n        durationText = (timeRemaining > 0 ? '-' : '') + (0, _reactJplayerUtils.convertTime)(timeRemaining, props.timeFormats);\n      } else {\n        durationText = (0, _reactJplayerUtils.convertTime)(props.duration, props.timeFormats);\n      }\n\n      props.setOption(props.id, 'durationText', durationText);\n    };\n  },\n  setCurrentTimeText: function setCurrentTimeText(props) {\n    return function () {\n      var currentTimeText = (0, _reactJplayerUtils.convertTime)(props.currentTime, props.timeFormats);\n      props.setOption(props.id, 'currentTimeText', currentTimeText);\n    };\n  }\n};\nvar lifecycle = {\n  componentDidUpdate: function componentDidUpdate(prevProps) {\n    if (prevProps.timeFormats !== this.props.timeFormats || prevProps.currentTime !== this.props.currentTime) {\n      this.props.setCurrentTimeText();\n    }\n\n    if (prevProps.timeFormats !== this.props.timeFormats || prevProps.currentTime !== this.props.currentTime || prevProps.duration !== this.props.duration || prevProps.showRemainingDuration !== this.props.showRemainingDuration) {\n      this.props.setDurationText();\n    }\n  }\n};\nexports.default = (0, _recompose.compose)((0, _reactJplayerUtils.connectWithId)(mapStateToProps, {\n  setOption: _actions.setOption\n}), (0, _recompose.withHandlers)(handlers), (0, _recompose.lifecycle)(lifecycle))((0, _recompose.renderNothing)(null));","map":null,"metadata":{},"sourceType":"script"}