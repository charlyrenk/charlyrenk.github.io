{"ast":null,"code":"'use strict';\n/**\n * Copyright Marc J. Schmidt. See the LICENSE file at the top-level\n * directory of this distribution and at\n * https://github.com/marcj/css-element-queries/blob/master/LICENSE.\n */\n\n(function (root, factory) {\n  if (typeof define === \"function\" && define.amd) {\n    define(['./ResizeSensor.js'], factory);\n  } else if (typeof exports === \"object\") {\n    module.exports = factory(require('./ResizeSensor.js'));\n  } else {\n    root.ElementQueries = factory(root.ResizeSensor);\n    root.ElementQueries.listen();\n  }\n})(typeof window !== 'undefined' ? window : this, function (ResizeSensor) {\n  /**\n   *\n   * @type {Function}\n   * @constructor\n   */\n  var ElementQueries = function () {\n    //<style> element with our dynamically created styles\n    var cssStyleElement; //all rules found for element queries\n\n    var allQueries = {}; //association map to identify which selector belongs to a element from the animationstart event.\n\n    var idToSelectorMapping = [];\n    /**\n     *\n     * @param element\n     * @returns {Number}\n     */\n\n    function getEmSize(element) {\n      if (!element) {\n        element = document.documentElement;\n      }\n\n      var fontSize = window.getComputedStyle(element, null).fontSize;\n      return parseFloat(fontSize) || 16;\n    }\n    /**\n     * Get element size\n     * @param {HTMLElement} element\n     * @returns {Object} {width, height}\n     */\n\n\n    function getElementSize(element) {\n      if (!element.getBoundingClientRect) {\n        return {\n          width: element.offsetWidth,\n          height: element.offsetHeight\n        };\n      }\n\n      var rect = element.getBoundingClientRect();\n      return {\n        width: Math.round(rect.width),\n        height: Math.round(rect.height)\n      };\n    }\n    /**\n     *\n     * @copyright https://github.com/Mr0grog/element-query/blob/master/LICENSE\n     *\n     * @param {HTMLElement} element\n     * @param {*} value\n     * @returns {*}\n     */\n\n\n    function convertToPx(element, value) {\n      var numbers = value.split(/\\d/);\n      var units = numbers[numbers.length - 1];\n      value = parseFloat(value);\n\n      switch (units) {\n        case \"px\":\n          return value;\n\n        case \"em\":\n          return value * getEmSize(element);\n\n        case \"rem\":\n          return value * getEmSize();\n        // Viewport units!\n        // According to http://quirksmode.org/mobile/tableViewport.html\n        // documentElement.clientWidth/Height gets us the most reliable info\n\n        case \"vw\":\n          return value * document.documentElement.clientWidth / 100;\n\n        case \"vh\":\n          return value * document.documentElement.clientHeight / 100;\n\n        case \"vmin\":\n        case \"vmax\":\n          var vw = document.documentElement.clientWidth / 100;\n          var vh = document.documentElement.clientHeight / 100;\n          var chooser = Math[units === \"vmin\" ? \"min\" : \"max\"];\n          return value * chooser(vw, vh);\n\n        default:\n          return value;\n        // for now, not supporting physical units (since they are just a set number of px)\n        // or ex/ch (getting accurate measurements is hard)\n      }\n    }\n    /**\n     *\n     * @param {HTMLElement} element\n     * @param {String} id\n     * @constructor\n     */\n\n\n    function SetupInformation(element, id) {\n      this.element = element;\n      var key, option, elementSize, value, actualValue, attrValues, attrValue, attrName;\n      var attributes = ['min-width', 'min-height', 'max-width', 'max-height'];\n      /**\n       * Extracts the computed width/height and sets to min/max- attribute.\n       */\n\n      this.call = function () {\n        // extract current dimensions\n        elementSize = getElementSize(this.element);\n        attrValues = {};\n\n        for (key in allQueries[id]) {\n          if (!allQueries[id].hasOwnProperty(key)) {\n            continue;\n          }\n\n          option = allQueries[id][key];\n          value = convertToPx(this.element, option.value);\n          actualValue = option.property === 'width' ? elementSize.width : elementSize.height;\n          attrName = option.mode + '-' + option.property;\n          attrValue = '';\n\n          if (option.mode === 'min' && actualValue >= value) {\n            attrValue += option.value;\n          }\n\n          if (option.mode === 'max' && actualValue <= value) {\n            attrValue += option.value;\n          }\n\n          if (!attrValues[attrName]) attrValues[attrName] = '';\n\n          if (attrValue && -1 === (' ' + attrValues[attrName] + ' ').indexOf(' ' + attrValue + ' ')) {\n            attrValues[attrName] += ' ' + attrValue;\n          }\n        }\n\n        for (var k in attributes) {\n          if (!attributes.hasOwnProperty(k)) continue;\n\n          if (attrValues[attributes[k]]) {\n            this.element.setAttribute(attributes[k], attrValues[attributes[k]].substr(1));\n          } else {\n            this.element.removeAttribute(attributes[k]);\n          }\n        }\n      };\n    }\n    /**\n     * @param {HTMLElement} element\n     * @param {Object}      id\n     */\n\n\n    function setupElement(element, id) {\n      if (!element.elementQueriesSetupInformation) {\n        element.elementQueriesSetupInformation = new SetupInformation(element, id);\n      }\n\n      if (!element.elementQueriesSensor) {\n        element.elementQueriesSensor = new ResizeSensor(element, function () {\n          element.elementQueriesSetupInformation.call();\n        });\n      }\n    }\n    /**\n     * Stores rules to the selector that should be applied once resized.\n     *\n     * @param {String} selector\n     * @param {String} mode min|max\n     * @param {String} property width|height\n     * @param {String} value\n     */\n\n\n    function queueQuery(selector, mode, property, value) {\n      if (typeof allQueries[selector] === 'undefined') {\n        allQueries[selector] = []; // add animation to trigger animationstart event, so we know exactly when a element appears in the DOM\n\n        var id = idToSelectorMapping.length;\n        cssStyleElement.innerHTML += '\\n' + selector + ' {animation: 0.1s element-queries;}';\n        cssStyleElement.innerHTML += '\\n' + selector + ' > .resize-sensor {min-width: ' + id + 'px;}';\n        idToSelectorMapping.push(selector);\n      }\n\n      allQueries[selector].push({\n        mode: mode,\n        property: property,\n        value: value\n      });\n    }\n\n    function getQuery(container) {\n      var query;\n      if (document.querySelectorAll) query = container ? container.querySelectorAll.bind(container) : document.querySelectorAll.bind(document);\n      if (!query && 'undefined' !== typeof $$) query = $$;\n      if (!query && 'undefined' !== typeof jQuery) query = jQuery;\n\n      if (!query) {\n        throw 'No document.querySelectorAll, jQuery or Mootools\\'s $$ found.';\n      }\n\n      return query;\n    }\n    /**\n     * If animationStart didn't catch a new element in the DOM, we can manually search for it\n     */\n\n\n    function findElementQueriesElements(container) {\n      var query = getQuery(container);\n\n      for (var selector in allQueries) if (allQueries.hasOwnProperty(selector)) {\n        // find all elements based on the extract query selector from the element query rule\n        var elements = query(selector, container);\n\n        for (var i = 0, j = elements.length; i < j; i++) {\n          setupElement(elements[i], selector);\n        }\n      }\n    }\n    /**\n     *\n     * @param {HTMLElement} element\n     */\n\n\n    function attachResponsiveImage(element) {\n      var children = [];\n      var rules = [];\n      var sources = [];\n      var defaultImageId = 0;\n      var lastActiveImage = -1;\n      var loadedImages = [];\n\n      for (var i in element.children) {\n        if (!element.children.hasOwnProperty(i)) continue;\n\n        if (element.children[i].tagName && element.children[i].tagName.toLowerCase() === 'img') {\n          children.push(element.children[i]);\n          var minWidth = element.children[i].getAttribute('min-width') || element.children[i].getAttribute('data-min-width'); //var minHeight = element.children[i].getAttribute('min-height') || element.children[i].getAttribute('data-min-height');\n\n          var src = element.children[i].getAttribute('data-src') || element.children[i].getAttribute('url');\n          sources.push(src);\n          var rule = {\n            minWidth: minWidth\n          };\n          rules.push(rule);\n\n          if (!minWidth) {\n            defaultImageId = children.length - 1;\n            element.children[i].style.display = 'block';\n          } else {\n            element.children[i].style.display = 'none';\n          }\n        }\n      }\n\n      lastActiveImage = defaultImageId;\n\n      function check() {\n        var imageToDisplay = false,\n            i;\n\n        for (i in children) {\n          if (!children.hasOwnProperty(i)) continue;\n\n          if (rules[i].minWidth) {\n            if (element.offsetWidth > rules[i].minWidth) {\n              imageToDisplay = i;\n            }\n          }\n        }\n\n        if (!imageToDisplay) {\n          //no rule matched, show default\n          imageToDisplay = defaultImageId;\n        }\n\n        if (lastActiveImage !== imageToDisplay) {\n          //image change\n          if (!loadedImages[imageToDisplay]) {\n            //image has not been loaded yet, we need to load the image first in memory to prevent flash of\n            //no content\n            var image = new Image();\n\n            image.onload = function () {\n              children[imageToDisplay].src = sources[imageToDisplay];\n              children[lastActiveImage].style.display = 'none';\n              children[imageToDisplay].style.display = 'block';\n              loadedImages[imageToDisplay] = true;\n              lastActiveImage = imageToDisplay;\n            };\n\n            image.src = sources[imageToDisplay];\n          } else {\n            children[lastActiveImage].style.display = 'none';\n            children[imageToDisplay].style.display = 'block';\n            lastActiveImage = imageToDisplay;\n          }\n        } else {\n          //make sure for initial check call the .src is set correctly\n          children[imageToDisplay].src = sources[imageToDisplay];\n        }\n      }\n\n      element.resizeSensorInstance = new ResizeSensor(element, check);\n      check();\n    }\n\n    function findResponsiveImages() {\n      var query = getQuery();\n      var elements = query('[data-responsive-image],[responsive-image]');\n\n      for (var i = 0, j = elements.length; i < j; i++) {\n        attachResponsiveImage(elements[i]);\n      }\n    }\n\n    var regex = /,?[\\s\\t]*([^,\\n]*?)((?:\\[[\\s\\t]*?(?:min|max)-(?:width|height)[\\s\\t]*?[~$\\^]?=[\\s\\t]*?\"[^\"]*?\"[\\s\\t]*?])+)([^,\\n\\s\\{]*)/mgi;\n    var attrRegex = /\\[[\\s\\t]*?(min|max)-(width|height)[\\s\\t]*?[~$\\^]?=[\\s\\t]*?\"([^\"]*?)\"[\\s\\t]*?]/mgi;\n    /**\n     * @param {String} css\n     */\n\n    function extractQuery(css) {\n      var match, smatch, attrs, attrMatch;\n      css = css.replace(/'/g, '\"');\n\n      while (null !== (match = regex.exec(css))) {\n        smatch = match[1] + match[3];\n        attrs = match[2];\n\n        while (null !== (attrMatch = attrRegex.exec(attrs))) {\n          queueQuery(smatch, attrMatch[1], attrMatch[2], attrMatch[3]);\n        }\n      }\n    }\n    /**\n     * @param {CssRule[]|String} rules\n     */\n\n\n    function readRules(rules) {\n      var selector = '';\n\n      if (!rules) {\n        return;\n      }\n\n      if ('string' === typeof rules) {\n        rules = rules.toLowerCase();\n\n        if (-1 !== rules.indexOf('min-width') || -1 !== rules.indexOf('max-width')) {\n          extractQuery(rules);\n        }\n      } else {\n        for (var i = 0, j = rules.length; i < j; i++) {\n          if (1 === rules[i].type) {\n            selector = rules[i].selectorText || rules[i].cssText;\n\n            if (-1 !== selector.indexOf('min-height') || -1 !== selector.indexOf('max-height')) {\n              extractQuery(selector);\n            } else if (-1 !== selector.indexOf('min-width') || -1 !== selector.indexOf('max-width')) {\n              extractQuery(selector);\n            }\n          } else if (4 === rules[i].type) {\n            readRules(rules[i].cssRules || rules[i].rules);\n          } else if (3 === rules[i].type) {\n            if (rules[i].styleSheet.hasOwnProperty(\"cssRules\")) {\n              readRules(rules[i].styleSheet.cssRules);\n            }\n          }\n        }\n      }\n    }\n\n    var defaultCssInjected = false;\n    /**\n     * Searches all css rules and setups the event listener to all elements with element query rules..\n     */\n\n    this.init = function () {\n      var animationStart = 'animationstart';\n\n      if (typeof document.documentElement.style['webkitAnimationName'] !== 'undefined') {\n        animationStart = 'webkitAnimationStart';\n      } else if (typeof document.documentElement.style['MozAnimationName'] !== 'undefined') {\n        animationStart = 'mozanimationstart';\n      } else if (typeof document.documentElement.style['OAnimationName'] !== 'undefined') {\n        animationStart = 'oanimationstart';\n      }\n\n      document.body.addEventListener(animationStart, function (e) {\n        var element = e.target;\n        var styles = element && window.getComputedStyle(element, null);\n        var animationName = styles && styles.getPropertyValue('animation-name');\n        var requiresSetup = animationName && -1 !== animationName.indexOf('element-queries');\n\n        if (requiresSetup) {\n          element.elementQueriesSensor = new ResizeSensor(element, function () {\n            if (element.elementQueriesSetupInformation) {\n              element.elementQueriesSetupInformation.call();\n            }\n          });\n          var sensorStyles = window.getComputedStyle(element.resizeSensor, null);\n          var id = sensorStyles.getPropertyValue('min-width');\n          id = parseInt(id.replace('px', ''));\n          setupElement(e.target, idToSelectorMapping[id]);\n        }\n      });\n\n      if (!defaultCssInjected) {\n        cssStyleElement = document.createElement('style');\n        cssStyleElement.type = 'text/css';\n        cssStyleElement.innerHTML = '[responsive-image] > img, [data-responsive-image] {overflow: hidden; padding: 0; } [responsive-image] > img, [data-responsive-image] > img {width: 100%;}'; //safari wants at least one rule in keyframes to start working\n\n        cssStyleElement.innerHTML += '\\n@keyframes element-queries { 0% { visibility: inherit; } }';\n        document.getElementsByTagName('head')[0].appendChild(cssStyleElement);\n        defaultCssInjected = true;\n      }\n\n      for (var i = 0, j = document.styleSheets.length; i < j; i++) {\n        try {\n          if (document.styleSheets[i].href && 0 === document.styleSheets[i].href.indexOf('file://')) {\n            console.warn(\"CssElementQueries: unable to parse local css files, \" + document.styleSheets[i].href);\n          }\n\n          readRules(document.styleSheets[i].cssRules || document.styleSheets[i].rules || document.styleSheets[i].cssText);\n        } catch (e) {}\n      }\n\n      findResponsiveImages();\n    };\n    /**\n     * Go through all collected rules (readRules()) and attach the resize-listener.\n     * Not necessary to call it manually, since we detect automatically when new elements\n     * are available in the DOM. However, sometimes handy for dirty DOM modifications.\n     *\n     * @param {HTMLElement} container only elements of the container are considered (document.body if not set)\n     */\n\n\n    this.findElementQueriesElements = function (container) {\n      findElementQueriesElements(container);\n    };\n\n    this.update = function () {\n      this.init();\n    };\n  };\n\n  ElementQueries.update = function () {\n    ElementQueries.instance.update();\n  };\n  /**\n   * Removes all sensor and elementquery information from the element.\n   *\n   * @param {HTMLElement} element\n   */\n\n\n  ElementQueries.detach = function (element) {\n    if (element.elementQueriesSetupInformation) {\n      //element queries\n      element.elementQueriesSensor.detach();\n      delete element.elementQueriesSetupInformation;\n      delete element.elementQueriesSensor;\n    } else if (element.resizeSensorInstance) {\n      //responsive image\n      element.resizeSensorInstance.detach();\n      delete element.resizeSensorInstance;\n    }\n  };\n\n  ElementQueries.init = function () {\n    if (!ElementQueries.instance) {\n      ElementQueries.instance = new ElementQueries();\n    }\n\n    ElementQueries.instance.init();\n  };\n\n  var domLoaded = function (callback) {\n    /* Mozilla, Chrome, Opera */\n    if (document.addEventListener) {\n      document.addEventListener('DOMContentLoaded', callback, false);\n    }\n    /* Safari, iCab, Konqueror */\n    else if (/KHTML|WebKit|iCab/i.test(navigator.userAgent)) {\n        var DOMLoadTimer = setInterval(function () {\n          if (/loaded|complete/i.test(document.readyState)) {\n            callback();\n            clearInterval(DOMLoadTimer);\n          }\n        }, 10);\n      }\n      /* Other web browsers */\n      else window.onload = callback;\n  };\n\n  ElementQueries.findElementQueriesElements = function (container) {\n    ElementQueries.instance.findElementQueriesElements(container);\n  };\n\n  ElementQueries.listen = function () {\n    domLoaded(ElementQueries.init);\n  };\n\n  return ElementQueries;\n});","map":null,"metadata":{},"sourceType":"script"}