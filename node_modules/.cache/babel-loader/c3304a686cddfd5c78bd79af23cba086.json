{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _reactJplayerUtils = require('react-jplayer-utils');\n\nvar _recompose = require('recompose');\n\nvar _lodash = require('lodash.merge');\n\nvar _lodash2 = _interopRequireDefault(_lodash);\n\nvar _actions = require('../../../actions/actions');\n\nvar _constants = require('../../../util/constants');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar mapStateToProps = function mapStateToProps(_ref, _ref2) {\n  var jPlayers = _ref.jPlayers;\n  var id = _ref2.id;\n  return {\n    paused: jPlayers[id].paused,\n    fullScreen: jPlayers[id].fullScreen,\n    muted: jPlayers[id].muted,\n    volume: jPlayers[id].volume,\n    keyEnabled: jPlayers[id].keyEnabled,\n    focused: jPlayers[id].focused,\n    id: id\n  };\n};\n\nvar mergeProps = function mergeProps(stateProps, _ref3, _ref4) {\n  var dispatch = _ref3.dispatch;\n  var keyBindings = _ref4.keyBindings,\n      id = _ref4.id;\n  return {\n    keyBindings: (0, _lodash2.default)({}, {\n      play: {\n        key: 80,\n        // p\n        fn: function fn() {\n          return stateProps.paused ? dispatch((0, _actions.play)(id)) : dispatch((0, _actions.pause)(id));\n        }\n      },\n      fullScreen: {\n        key: 70,\n        // f\n        fn: function fn() {\n          return dispatch((0, _actions.setOption)(id, 'fullScreen', !stateProps.fullScreen));\n        }\n      },\n      mute: {\n        key: 77,\n        // m\n        fn: function fn() {\n          return dispatch((0, _actions.setMute)(id, !stateProps.muted));\n        }\n      },\n      volumeUp: {\n        key: 190,\n        // .\n        fn: function fn() {\n          dispatch((0, _actions.setVolume)(id, stateProps.volume + 0.1));\n        }\n      },\n      volumeDown: {\n        key: 188,\n        // ,\n        fn: function fn() {\n          return dispatch((0, _actions.setVolume)(id, stateProps.volume - 0.1));\n        }\n      },\n      loop: {\n        key: 76,\n        // l\n        fn: function fn() {\n          return dispatch((0, _actions.setOption)(id, 'loop', !stateProps.loop));\n        }\n      }\n    }, keyBindings),\n    focused: stateProps.focused,\n    keyEnabled: stateProps.keyEnabled\n  };\n};\n\nvar handlers = {\n  onKeyDown: function onKeyDown(props) {\n    return function (event) {\n      if (_constants.keyIgnoredElementNames.some(function (name) {\n        return name.toUpperCase() === event.target.nodeName.toUpperCase();\n      }) || !props.focused || !props.keyEnabled) {\n        return;\n      }\n\n      Object.keys(props.keyBindings).forEach(function (key) {\n        var keyBinding = props.keyBindings[key];\n\n        if (keyBinding.key === event.keyCode || keyBinding.key === event.key) {\n          event.preventDefault();\n          keyBinding.fn();\n        }\n      });\n    };\n  }\n};\nvar lifecycle = {\n  componentDidMount: function componentDidMount() {\n    document.addEventListener('keydown', this.props.onKeyDown);\n  },\n  componentWillUnmount: function componentWillUnmount() {\n    document.removeEventListener('keydown', this.props.onKeyDown);\n  }\n};\nexports.default = (0, _recompose.compose)((0, _reactJplayerUtils.connectWithId)(mapStateToProps, null, mergeProps), (0, _recompose.withHandlers)(handlers), (0, _recompose.lifecycle)(lifecycle))((0, _recompose.renderNothing)(null));","map":null,"metadata":{},"sourceType":"script"}