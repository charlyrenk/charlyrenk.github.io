{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _reactJplayerUtils = require('react-jplayer-utils');\n\nvar _initializeOptions = require('../initializeOptions/initializeOptions');\n\nvar _constants = require('../util/constants');\n\nvar _urlNotSetError = require('../util/errorHandlers/urlNotSetError');\n\nvar _urlNotSetError2 = _interopRequireDefault(_urlNotSetError);\n\nvar _noFormatSupportedError = require('../util/errorHandlers/noFormatSupportedError');\n\nvar _noFormatSupportedError2 = _interopRequireDefault(_noFormatSupportedError);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nvar updateFormats = function updateFormats(sources) {\n  var formats = [];\n  Object.keys(sources).forEach(function (supplied) {\n    var canPlayType = void 0;\n\n    try {\n      // Some legacy browsers don't have canPlayType property\n      canPlayType = document.createElement(_constants.formats[supplied].MEDIA).canPlayType(_constants.formats[supplied].CODEC);\n    } catch (error) {\n      canPlayType = '';\n    }\n\n    formats.push({\n      supplied: supplied,\n      supported: canPlayType\n    });\n  });\n  return formats;\n};\n\nvar clearMedia = function clearMedia() {\n  return _extends({}, _constants.defaultStatus, {\n    media: _constants.defaultOptions.media\n  });\n};\n\nvar setMedia = function setMedia(_, _ref) {\n  var media = _ref.media;\n  var video = void 0;\n  var src = void 0;\n  var nonSupported = true;\n  var error = void 0;\n  var formats = updateFormats(media.sources);\n  formats.forEach(function (format) {\n    if (format.supported && nonSupported) {\n      video = _constants.formats[format.supplied].MEDIA === 'video';\n      src = media.sources[format.supplied];\n      nonSupported = false;\n    }\n  });\n\n  if (nonSupported) {\n    error = (0, _noFormatSupportedError2.default)('media.sources: \\'' + Object.keys(media.sources).join(', ') + '\\'');\n  }\n\n  return _extends({}, clearMedia(), {\n    mediaSettings: {\n      formats: formats,\n      video: video,\n      nonSupported: nonSupported\n    },\n    media: media,\n    video: video,\n    src: src,\n    paused: true,\n    error: error\n  });\n};\n\nvar play = function play(jPlayer, _ref2) {\n  var time = _ref2.time;\n\n  if (jPlayer.src) {\n    return {\n      paused: false,\n      newTime: !isNaN(time) ? time : null\n    };\n  }\n\n  return {\n    error: (0, _urlNotSetError2.default)(play.name)\n  };\n};\n\nvar pause = function pause(jPlayer, _ref3) {\n  var time = _ref3.time;\n\n  if (jPlayer.src) {\n    return {\n      paused: true,\n      newTime: !isNaN(time) ? time : null\n    };\n  }\n\n  return {\n    error: (0, _urlNotSetError2.default)(pause.name)\n  };\n};\n\nvar setPlayHead = function setPlayHead(jPlayer, _ref4) {\n  var percent = _ref4.percent;\n  var limitedPercent = (0, _reactJplayerUtils.limitValue)(percent, 0, 100);\n\n  if (jPlayer.src) {\n    return {\n      playHeadPercent: limitedPercent\n    };\n  }\n\n  return {\n    error: (0, _urlNotSetError2.default)(setPlayHead.name)\n  };\n};\n\nvar setVolume = function setVolume(_, _ref5) {\n  var volume = _ref5.volume;\n  return {\n    volume: (0, _reactJplayerUtils.limitValue)(volume, 0, 1),\n    muted: volume <= 0\n  };\n};\n\nvar setMute = function setMute(_, _ref6) {\n  var mute = _ref6.mute;\n  return {\n    muted: mute\n  };\n};\n\nvar setOption = function setOption(jPlayer, _ref7) {\n  var key = _ref7.key,\n      value = _ref7.value;\n\n  switch (key) {\n    case 'media':\n      {\n        if (Object.keys(value).some(function (v) {\n          return v;\n        })) {\n          return setMedia(jPlayer, {\n            media: value\n          });\n        }\n\n        return clearMedia();\n      }\n\n    case 'playHeadPercent':\n      return setPlayHead(jPlayer, {\n        percent: value\n      });\n\n    case 'volume':\n      return setVolume(jPlayer, {\n        volume: value\n      });\n\n    case 'muted':\n      return setMute(jPlayer, {\n        mute: value\n      });\n\n    default:\n      return _defineProperty({}, key, value);\n  }\n};\n\nvar focus = function focus(state, id) {\n  var newState = _extends({}, state);\n\n  if (newState[id].keyEnabled) {\n    Object.keys(newState).forEach(function (key) {\n      if (key === id) {\n        newState[key].focused = true;\n      } else {\n        newState[key].focused = false;\n      }\n    });\n  }\n\n  return newState;\n};\n\nvar focusOnFirstKeyEnabledPlayer = function focusOnFirstKeyEnabledPlayer(state) {\n  var firstKeyEnabledPlayer = Object.keys(state).filter(function (key) {\n    return state[key].keyEnabled;\n  }).shift();\n\n  if (state[firstKeyEnabledPlayer] !== undefined) {\n    var focusedPlayer = _extends({}, state[firstKeyEnabledPlayer], {\n      focused: true\n    });\n\n    return _extends({}, state, _defineProperty({}, firstKeyEnabledPlayer, focusedPlayer));\n  }\n\n  return state;\n};\n\nvar updateJPlayer = function updateJPlayer(state, action, fn) {\n  var value = fn(state[action.id], action);\n  var newState = state[action.id].keyEnabled ? focus(state, action.id) : focusOnFirstKeyEnabledPlayer(state);\n  var jPlayer = newState[action.id];\n  return _extends({}, newState, _defineProperty({}, action.id, _extends({}, jPlayer, value)));\n};\n\nvar reducer = function reducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _initializeOptions.initialState;\n  var action = arguments[1];\n\n  var updateValue = function updateValue(fn) {\n    return updateJPlayer(state, action, fn);\n  };\n\n  switch (action.type) {\n    case _constants.actionNames.SET_MEDIA:\n      return updateValue(setMedia);\n\n    case _constants.actionNames.CLEAR_MEDIA:\n      return updateValue(clearMedia);\n\n    case _constants.actionNames.PLAY:\n      return updateValue(play);\n\n    case _constants.actionNames.PAUSE:\n      return updateValue(pause);\n\n    case _constants.actionNames.PLAY_HEAD:\n      return updateValue(setPlayHead);\n\n    case _constants.actionNames.VOLUME:\n      return updateValue(setVolume);\n\n    case _constants.actionNames.MUTE:\n      return updateValue(setMute);\n\n    case _constants.actionNames.SET_OPTION:\n      return updateValue(setOption);\n\n    case _constants.actionNames.FOCUS:\n      return focus(state, action.id);\n\n    default:\n      return state;\n  }\n};\n\nexports.default = reducer;","map":null,"metadata":{},"sourceType":"script"}